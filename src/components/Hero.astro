---
---

<section id="hero" class="min-h-screen flex flex-col justify-center relative overflow-hidden">
  <!-- Enhanced background elements -->
  <div class="absolute inset-0 z-0">
    <!-- Main radial gradient background -->
    <div class="h-full w-full bg-[radial-gradient(circle_at_center,rgba(255,255,255,0.1),transparent_70%)]"></div>
    
    <!-- Animated gradient orbs -->
    <div class="absolute top-[10%] right-[15%] w-[25vw] h-[25vw] opacity-[0.03] rounded-full bg-white blur-[80px] animate-float-slow"></div>
    <div class="absolute bottom-[20%] left-[10%] w-[15vw] h-[15vw] opacity-[0.02] rounded-full bg-white blur-[60px] animate-float-medium"></div>
    
    <!-- Subtle grid pattern overlay -->
    <div class="absolute inset-0 opacity-[0.03] bg-[repeating-linear-gradient(90deg,var(--color-accent),var(--color-accent)_1px,transparent_1px,transparent_30px),repeating-linear-gradient(0deg,var(--color-accent),var(--color-accent)_1px,transparent_1px,transparent_30px)]"></div>
  </div>
  
  <div class="container mx-auto px-8 relative z-10">
    <div class="max-w-3xl">
      <div class="overflow-hidden">
        <h1 class="text-5xl md:text-7xl font-light mt-2 mb-6 text-white leading-tight relative animate-fade-in-up">
          <span class="scramble-text">
            {"Software Engineer".split('').map((char, index) => (
              char === ' ' 
                ? <span class="scramble-space" data-index={index}>&nbsp;</span>
                : <span class="scramble-char" data-index={index} data-original={char}>{char}</span>
            ))}
          </span>
          <span class="absolute -left-4 top-1/2 w-2 h-10 bg-white/40 -translate-y-1/2 animate-pulse-slow"></span>
        </h1>
      </div>
      <p class="text-xl md:text-2xl text-gray-300 mb-12 font-light animate-fade-in" style="animation-delay: 200ms;">
      </p>
      <div class="flex flex-wrap gap-6 animate-fade-in" style="animation-delay: 400ms;">
        <a href="/#projects" class="btn-primary group relative overflow-hidden">
          <span class="relative z-10">View Projects</span>
          <span class="absolute inset-0 bg-white/10 translate-y-full group-hover:translate-y-0 transition-transform duration-300"></span>
        </a>
        <a href="https://github.com/Vasie1337" target="_blank" class="btn-secondary flex items-center group">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 transition-transform duration-300 group-hover:rotate-[360deg]" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
          </svg>
          GitHub
        </a>
        <a href="/#contact" class="btn-secondary group relative overflow-hidden">
          <span class="relative z-10">Contact Me</span>
          <span class="absolute inset-0 bg-white/10 translate-y-full group-hover:translate-y-0 transition-transform duration-300"></span>
        </a>
      </div>
    </div>
  </div>
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2">
    <a href="/#expertise" class="text-white/50 hover:text-white transition-colors duration-300 animate-bounce-subtle">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
      </svg>
    </a>
  </div>
</section>

<style>
  @keyframes float-slow {
    0%, 100% { transform: translateY(0) translateX(0); }
    50% { transform: translateY(-20px) translateX(10px); }
  }
  
  @keyframes float-medium {
    0%, 100% { transform: translateY(0) translateX(0); }
    50% { transform: translateY(15px) translateX(-15px); }
  }
  
  @keyframes pulse-slow {
    0%, 100% { opacity: 0.4; }
    50% { opacity: 0.8; }
  }
  
  @keyframes fade-in-up {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes bounce-subtle {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(5px); }
  }
  
  @keyframes scramble-pulse {
    0%, 100% { letter-spacing: normal; transform: translateX(0); }
    50% { letter-spacing: 0.1em; transform: translateX(5px); }
  }
  
  .animate-float-slow {
    animation: float-slow 10s ease-in-out infinite;
  }
  
  .animate-float-medium {
    animation: float-medium 8s ease-in-out infinite;
  }
  
  .animate-pulse-slow {
    animation: pulse-slow 4s ease-in-out infinite;
  }
  
  .animate-fade-in-up {
    animation: fade-in-up 0.8s ease-out forwards;
  }
  
  .animate-fade-in {
    animation: fade-in 0.8s ease-out forwards;
  }
  
  .animate-bounce-subtle {
    animation: bounce-subtle 2s ease-in-out infinite;
  }
  
  /* Scramble text effect */
  .scramble-text {
    display: inline-flex;
    flex-wrap: wrap;
  }
  
  .scramble-char {
    position: relative;
    display: inline-block;
    transition: all 0.05s ease;
  }
  
  .scramble-char:hover {
    animation: scramble-pulse 0.2s ease-in-out infinite;
  }
  
  .scramble-space {
    display: inline-block;
    width: 0.5em;
  }
</style>

<script>
  // Character randomization
  document.addEventListener('DOMContentLoaded', () => {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+{}[]|;:,.<>?";
    const scrambleChars = document.querySelectorAll('.scramble-char');
    
    scrambleChars.forEach((char) => {
      const originalChar = char.getAttribute('data-original') || '';
      
      // Randomize characters on hover
      char.addEventListener('mouseover', () => {
        if (!(char instanceof HTMLElement)) return;
        
        // Create and store interval ID
        const intervalId = setInterval(() => {
          const randomChar = chars.charAt(Math.floor(Math.random() * chars.length));
          char.textContent = randomChar;
        }, 50); // Change character every 50ms
        
        // Store the interval ID on the element
        char.dataset.intervalId = intervalId.toString();
      });
      
      // Reset to original character on mouseout
      char.addEventListener('mouseout', () => {
        if (!(char instanceof HTMLElement)) return;
        
        // Clear the interval
        if (char.dataset.intervalId) {
          clearInterval(parseInt(char.dataset.intervalId));
        }
        
        // Reset to original character
        setTimeout(() => {
          char.textContent = originalChar;
        }, 100);
      });
    });
  });
</script>
