---
import heroData from '../data/hero.json';
---

<section id="hero" class="min-h-screen flex flex-col justify-center relative overflow-hidden py-32 px-8">
  <div class="absolute inset-0 bg-[#050505]"></div>
  
  <div class="container mx-auto relative z-10">
    <div class="max-w-3xl">
      <div class="reveal">
        <div class="mb-1 text-white/40 text-lg font-light tracking-wider">{heroData.heading}</div>
        
        <h1 class="text-5xl md:text-7xl font-light mb-6 leading-tight">
          {heroData.title}
          <span class="block w-16 h-px bg-white/30 mt-6"></span>
        </h1>

        <p class="text-xl md:text-2xl text-white/80 mb-12 font-light">
          {heroData.description}
        </p>
        
        <div class="flex flex-wrap gap-6 items-center">
          {heroData.links.map(link => (
            <a 
              href={link.url} 
              target={link.isExternal ? "_blank" : undefined} 
              class="inline-flex items-center px-8 py-3 border border-white/5 hover:border-white/20 rounded-sm transition-all duration-300"
            >
              {link.icon === 'github' && (
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                </svg>
              )}
              <span class="text-sm font-light tracking-wide">{link.text}</span>
            </a>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
  };
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('revealed');
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);
  
  document.querySelectorAll('.reveal').forEach(element => {
    observer.observe(element);
  });
</script>

<style>
  .reveal {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.8s ease-out;
  }
  
  .reveal.revealed {
    opacity: 1;
    transform: translateY(0);
  }
</style>
