name: Build Docker Image

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'production'
        type: string
      instance_name:
        description: 'Instance name'
        required: false
        type: string
    outputs:
      image_tag:
        description: 'Built image tag'
        value: ${{ jobs.build.outputs.image_tag }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build-push.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      # Cache Docker layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Generate deployment tag
        id: tags
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
      
      - name: Build and push Docker images
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ env.SHORT_SHA }}
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
          cache-from: |
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=${{ inputs.environment }}
      
      - name: Set output image tag
        run: echo "image_tag=${{ env.SHORT_SHA }}" >> $GITHUB_OUTPUT 