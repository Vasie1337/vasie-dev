###########################################
# Build Stage
###########################################
name: 2. Build Docker Image

###########################################
# Workflow Triggers
###########################################
on:
  # For manual builds
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project name'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      instance_name:
        description: 'Instance name'
        required: true
        type: string
      short_sha:
        description: 'Short SHA of the commit'
        required: true
        type: string
  
  # Called by the config workflow
  workflow_call:
    inputs:
      project_name:
        description: 'Project name'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      instance_name:
        description: 'Instance name'
        required: true
        type: string
      short_sha:
        description: 'Short SHA of the commit'
        required: true
        type: string
    outputs:
      docker_image:
        description: "The full Docker image name including tag"
        value: ${{ jobs.build.outputs.docker_image }}

###########################################
# Jobs
###########################################
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.image-info.outputs.docker_image }}
    
    # Use inputs from workflow_dispatch or workflow_call
    env:
      PROJECT_NAME: ${{ inputs.project_name }}
      ENVIRONMENT: ${{ inputs.environment }}
      INSTANCE_NAME: ${{ inputs.instance_name }}
      SHORT_SHA: ${{ inputs.short_sha }}
    
    steps:
      #---------------------------------------
      # Checkout Repository
      #---------------------------------------
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Shallow clone for faster checkout
      
      #---------------------------------------
      # Docker Setup
      #---------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Set Docker image info
        id: image-info
        run: |
          echo "docker_image=${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:${{ env.SHORT_SHA }}" >> $GITHUB_OUTPUT
      
      #---------------------------------------
      # Build and Push Docker Image
      #---------------------------------------
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:${{ env.SHORT_SHA }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:latest
          cache-from: |
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:latest
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=${{ env.ENVIRONMENT }}
      
      #---------------------------------------
      # Generate Deployment Files
      #---------------------------------------
      - name: Generate Docker Compose file
        run: |
          cat > docker-compose.${{ env.ENVIRONMENT }}-${{ env.INSTANCE_NAME }}.yml << 'EOL'
          version: '3.8'
          
          services:
            ${{ env.INSTANCE_NAME }}:
              image: ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:${{ env.SHORT_SHA }}
              container_name: ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}
              restart: always
              environment:
                - NODE_ENV=${{ env.ENVIRONMENT }}
                - INSTANCE_NAME=${{ env.INSTANCE_NAME }}
              volumes:
                - ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-data:/data
              networks:
                - ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-network
              # Optional port mapping - uncomment and customize as needed
              # ports:
              #  - "${PORT_PREFIX}80:80"  # You can define PORT_PREFIX in repository secrets
          
            ${{ env.INSTANCE_NAME }}-cloudflared:
              image: cloudflare/cloudflared:latest
              container_name: ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-cloudflared
              restart: always
              command: tunnel run
              environment:
                - TUNNEL_TOKEN=${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
              networks:
                - ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-network
          
          volumes:
            ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-data:
              name: ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-data
          
          networks:
            ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-network:
              name: ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-network
              driver: bridge
          EOL
      
      #---------------------------------------
      # Save Artifacts
      #---------------------------------------
      - name: Upload Docker Compose as artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files
          path: docker-compose.${{ env.ENVIRONMENT }}-${{ env.INSTANCE_NAME }}.yml
          retention-days: 1

  #---------------------------------------
  # Call the Deploy Workflow
  #---------------------------------------
  deploy:
    needs: build
    uses: ./.github/workflows/deploy.yml
    with:
      project_name: ${{ inputs.project_name }}
      environment: ${{ inputs.environment }}
      instance_name: ${{ inputs.instance_name }}
      short_sha: ${{ inputs.short_sha }}
    secrets: inherit 