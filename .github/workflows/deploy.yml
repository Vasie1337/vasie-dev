name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  DOCKER_REGISTRY: ghcr.io
  CONFIG_FILE: .github/build-config.json

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.parse-config.outputs.services }}
      service_names: ${{ steps.parse-names.outputs.names }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Parse build configuration
      id: parse-config
      run: |
        CONFIG=$(cat ${{ env.CONFIG_FILE }})
        echo "services=$(echo $CONFIG | jq -c '.services')" >> $GITHUB_OUTPUT
    
    - name: Extract service names
      id: parse-names
      run: |
        NAMES=$(cat ${{ env.CONFIG_FILE }} | jq -r '.services[].name' | jq -R -s -c 'split("\n") | map(select(length > 0))')
        echo "names=$NAMES" >> $GITHUB_OUTPUT

  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image-info.outputs.tag }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set lowercase values
      id: lowercase
      run: |
        OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')
        SHORT_HASH=$(echo "${{ github.sha }}" | cut -c1-7)
        
        echo "owner=$OWNER_LOWERCASE" >> $GITHUB_OUTPUT
        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create image tag
      id: image-info
      run: |
        TAG="${{ steps.lowercase.outputs.docker_username }}/${{ matrix.service.name }}:latest"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image for ${{ matrix.service.name }}
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.image-info.outputs.tag }}
        cache-from: type=gha,scope=${{ matrix.service.name }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service.name }}
        secrets: |
          "github_token=${{ secrets.GITHUB_TOKEN }}"
        build-args: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: [build-and-push, prepare]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set lowercase values
      id: lowercase
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')
        OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "docker_username=$DOCKER_USERNAME" >> $GITHUB_OUTPUT
        echo "service_names=${{ needs.prepare.outputs.service_names }}" >> $GITHUB_OUTPUT
    
    - name: Install sshpass
      run: |
        sudo apt-get update && sudo apt-get install -y sshpass
    
    - name: Set project directory name
      id: project-dir
      run: |
        echo "dir_name=${{ steps.lowercase.outputs.repo_name }}" >> $GITHUB_OUTPUT
    
    - name: Create .env file for deployment
      run: |
        cat > .env << EOF
        DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
        GITHUB_OWNER=${{ steps.lowercase.outputs.owner }}
        PROJECT_NAME=${{ steps.lowercase.outputs.repo_name }}
        IMAGE_TAG=latest
        INSTANCE_NAME=${{ steps.lowercase.outputs.repo_name }}
        ENVIRONMENT=production
        # Add GitHub token for registry authentication
        GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
        EOF
        
        EXCLUDED_SECRETS="DOCKER_USERNAME DOCKER_TOKEN GITHUB_TOKEN SSH_PRIVATE_KEY VPS_IP VPS_USER"
        
        for secret in $(echo "${{ toJSON(secrets) }}" | jq -r 'keys[]'); do
          if [[ " $EXCLUDED_SECRETS " == *" $secret "* ]]; then
            continue
          fi
          
          value=$(echo "${{ toJSON(secrets) }}" | jq -r --arg key "$secret" '.[$key]')
          echo "$secret=$value" >> .env
        done
    
    - name: Update docker-compose with new image tags
      run: |
        cat > update-compose.sh << 'EOF'
        #!/bin/bash
        
        SERVICES=$(cat .github/build-config.json | jq -c '.services[]')
        
        echo "$SERVICES" | while read -r service; do
          NAME=$(echo "$service" | jq -r '.name')
          IMAGE_TAG="${DOCKER_USERNAME}/${NAME}:latest"
          
          if ! command -v yq &> /dev/null; then
            wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            chmod +x /usr/local/bin/yq
          fi
          
          if yq '.services | has("'$NAME'")' docker-compose.yml | grep -q 'true'; then
            yq -i ".services.$NAME.image = \"$IMAGE_TAG\"" docker-compose.yml
          fi
        done
        EOF
        
        chmod +x update-compose.sh
        sudo apt-get update && sudo apt-get install -y wget
        DOCKER_USERNAME="${{ steps.lowercase.outputs.docker_username }}" ./update-compose.sh
    
    - name: Create project directory on VPS
      run: |
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} "mkdir -p ~/${{ steps.project-dir.outputs.dir_name }}"
    
    - name: Copy files to VPS
      run: |
        sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null docker-compose.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/${{ steps.project-dir.outputs.dir_name }}/
        sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null .env ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/${{ steps.project-dir.outputs.dir_name }}/.env
        
        if [ -d "config" ]; then
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r config ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/${{ steps.project-dir.outputs.dir_name }}/
        fi
    
    - name: Deploy on VPS
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        cd ~/$1
        source .env
        
        docker compose down || true
        docker compose pull
        docker compose up -d
        docker image prune -f
        EOF
        
        chmod +x deploy.sh
        sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null deploy.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/deploy.sh
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} "bash ~/deploy.sh ${{ steps.project-dir.outputs.dir_name }}"