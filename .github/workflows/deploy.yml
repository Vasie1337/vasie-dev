name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  CONFIG_FILE: .github/build-config.json

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.parse-config.outputs.services }}
      service_names: ${{ steps.parse-names.outputs.names }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Parse build configuration
      id: parse-config
      run: |
        # Read the config file and output as JSON
        CONFIG=$(cat ${{ env.CONFIG_FILE }})
        echo "services=$(echo $CONFIG | jq -c '.services')" >> $GITHUB_OUTPUT
    
    - name: Extract service names
      id: parse-names
      run: |
        # Extract service names for later use
        NAMES=$(cat ${{ env.CONFIG_FILE }} | jq -r '.services[].name' | jq -R -s -c 'split("\n") | map(select(length > 0))')
        echo "names=$NAMES" >> $GITHUB_OUTPUT

  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image-info.outputs.tag }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set lowercase values
      id: lowercase
      run: |
        # Convert owner name to lowercase
        OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')
        DOCKER_USERNAME=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]')
        SHORT_HASH=$(echo "${{ github.sha }}" | cut -c1-7)
        
        echo "owner=$OWNER_LOWERCASE" >> $GITHUB_OUTPUT
        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "docker_username=$DOCKER_USERNAME" >> $GITHUB_OUTPUT
        echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Create image tag
      id: image-info
      run: |
        # Create a simple tag format without 'sha-' prefix
        TAG="${{ steps.lowercase.outputs.docker_username }}/${{ matrix.service.name }}:latest"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Building and pushing image: $TAG"
    
    - name: Build and push Docker image for ${{ matrix.service.name }}
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.image-info.outputs.tag }}
        cache-from: type=gha,scope=${{ matrix.service.name }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service.name }}
        secrets: |
          "github_token=${{ secrets.GITHUB_TOKEN }}"
        build-args: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
    
    - name: Verify image was pushed
      run: |
        echo "Verifying image ${{ steps.image-info.outputs.tag }} was pushed..."
        # Give Docker Hub a moment to process the push
        sleep 5
        docker pull ${{ steps.image-info.outputs.tag }} || { echo "Failed to pull image - it may not have been pushed correctly"; exit 1; }
        echo "Image successfully pushed and verified!"

  deploy:
    needs: [build-and-push, prepare]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set lowercase values
      id: lowercase
      run: |
        # Extract repository name without owner and convert to lowercase
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')
        DOCKER_USERNAME=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]')
        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "docker_username=$DOCKER_USERNAME" >> $GITHUB_OUTPUT
        # Store service names for later use
        echo "service_names=${{ needs.prepare.outputs.service_names }}" >> $GITHUB_OUTPUT
    
    - name: Set project directory name
      id: project-dir
      run: |
        # Use lowercase repository name for the directory
        echo "dir_name=${{ steps.lowercase.outputs.repo_name }}" >> $GITHUB_OUTPUT
    
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts
    
    - name: Create .env file for deployment
      run: |
        cat > .env << EOF
        DOCKER_USERNAME=${{ steps.lowercase.outputs.docker_username }}
        PROJECT_NAME=${{ steps.lowercase.outputs.repo_name }}
        IMAGE_TAG=latest
        INSTANCE_NAME=${{ steps.lowercase.outputs.repo_name }}
        ENVIRONMENT=production
        CLOUDFLARE_TUNNEL_TOKEN=${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
        EOF
    
    - name: Update docker-compose with new image tags
      run: |
        # Create a temporary script to update docker-compose
        cat > update-compose.sh << 'EOF'
        #!/bin/bash
        
        # Get the services from build-config.json
        SERVICES=$(cat .github/build-config.json | jq -c '.services[]')
        
        # Process each service
        echo "$SERVICES" | while read -r service; do
          # Extract service name from build-config.json
          NAME=$(echo "$service" | jq -r '.name')
          
          # Use proper Docker Hub format: username/repository:tag
          # Using 'latest' tag consistently
          IMAGE_TAG="${DOCKER_USERNAME}/${NAME}:latest"
          
          # Use yq to update the docker-compose.yml (install if necessary)
          if ! command -v yq &> /dev/null; then
            wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            chmod +x /usr/local/bin/yq
          fi
          
          # Update the image for this service if it exists in the compose file
          if yq '.services | has("'$NAME'")' docker-compose.yml | grep -q 'true'; then
            yq -i ".services.$NAME.image = \"$IMAGE_TAG\"" docker-compose.yml
            echo "Updated service $NAME with image: $IMAGE_TAG"
            grep -A 2 "$NAME:" docker-compose.yml
          else
            echo "Service $NAME not found in docker-compose.yml, skipping update"
          fi
        done
        EOF
        
        chmod +x update-compose.sh
        sudo apt-get update && sudo apt-get install -y wget
        DOCKER_USERNAME="${{ steps.lowercase.outputs.docker_username }}" ./update-compose.sh
        
        # Print the updated docker-compose.yml for debugging
        echo "Final docker-compose.yml:"
        cat docker-compose.yml
    
    - name: Create project directory on VPS
      run: |
        ssh -i ~/.ssh/id_rsa -t ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} "mkdir -p ~/${{ steps.project-dir.outputs.dir_name }}"
    
    - name: Copy files to VPS
      run: |
        scp -i ~/.ssh/id_rsa docker-compose.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/${{ steps.project-dir.outputs.dir_name }}/
        scp -i ~/.ssh/id_rsa .env ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/${{ steps.project-dir.outputs.dir_name }}/.env
        
        # Copy any additional config files if specified
        if [ -d "config" ]; then
          scp -i ~/.ssh/id_rsa -r config ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/${{ steps.project-dir.outputs.dir_name }}/
        fi
    
    - name: Deploy on VPS
      run: |
        # Create a universal deployment script that works with any project
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Go to the project directory
        cd ~/$1
        
        echo "Environment variables:"
        cat .env
        
        echo "Docker compose file:"
        cat docker-compose.yml
        
        # Extract environment variables
        source .env
        NETWORK_NAME="${INSTANCE_NAME}-network"
        
        echo "Ensuring all images are available..."
        # Pull latest version of all images
        docker compose pull
        
        echo "Stopping existing containers..."
        docker compose down || true
        
        echo "Cleaning up existing networks..."
        # Check if network exists and remove it
        if docker network ls | grep -q "$NETWORK_NAME"; then
          echo "Removing network: $NETWORK_NAME"
          
          # Force removal of any containers still using this network
          for container in $(docker network inspect -f '{{range .Containers}}{{.Name}} {{end}}' "$NETWORK_NAME" 2>/dev/null || echo ""); do
            if [ -n "$container" ]; then
              echo "Disconnecting container $container from network $NETWORK_NAME"
              docker network disconnect -f "$NETWORK_NAME" "$container" || true
            fi
          done
          
          # Remove the network
          docker network rm "$NETWORK_NAME" || true
          sleep 2 # Give Docker a moment to clean up
        fi
        
        # Clean up any legacy networks that might exist
        for suffix in "" "-production" "-staging" "-dev"; do
          OLD_NETWORK_NAME="${INSTANCE_NAME}${suffix}-network"
          if docker network ls | grep -q "$OLD_NETWORK_NAME"; then
            echo "Removing legacy network: $OLD_NETWORK_NAME"
            # Force removal of any containers still using this network
            for container in $(docker network inspect -f '{{range .Containers}}{{.Name}} {{end}}' "$OLD_NETWORK_NAME" 2>/dev/null || echo ""); do
              if [ -n "$container" ]; then
                echo "Disconnecting container $container from network $OLD_NETWORK_NAME"
                docker network disconnect -f "$OLD_NETWORK_NAME" "$container" || true
              fi
            done
            docker network rm "$OLD_NETWORK_NAME" || true
            sleep 1
          fi
        done
        
        echo "Starting new containers with --force-recreate to rebuild networks..."
        docker compose up -d --force-recreate
        
        echo "Containers running:"
        docker compose ps
        
        # Get all running container names for this project
        CONTAINERS=$(docker compose ps --format json | jq -r '.Name')
        
        echo "Waiting for services to stabilize..."
        sleep 5
        
        # Verify each service is running properly
        echo "Verifying services:"
        docker compose ps -a
        
        echo "Cleaning up old images..."
        docker image prune -f
        
        echo "Container logs:"
        docker compose logs --tail=20
        
        # Extract service names from docker-compose.yml
        SERVICES=$(docker compose config --services)
        
        # Check if we have any potential hostname mismatches for Cloudflare
        if docker compose ps | grep -q "cloudflared"; then
          echo "Cloudflare tunnel detected. Checking for potential hostname mismatches..."
          
          # Analyze docker-compose.yml for potential hostname references
          CF_SERVICE=$(docker compose config --service cloudflared)
          
          echo "Note: If your Cloudflare tunnel doesn't work, check if it's configured correctly."
          echo "Current containers that can be referenced in tunnel config:"
          for container in $CONTAINERS; do
            SHORT_NAME=$(echo "$container" | sed "s/${INSTANCE_NAME}-//g" | sed "s/-${ENVIRONMENT}//g")
            echo "- $container (short name: $SHORT_NAME)"
          done
        fi
        
        echo "Deployment completed successfully!"
        EOF
        
        chmod +x deploy.sh
        scp -i ~/.ssh/id_rsa deploy.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/deploy.sh
        ssh -i ~/.ssh/id_rsa -t ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} "bash ~/deploy.sh ${{ steps.project-dir.outputs.dir_name }}"
    
    - name: Verify deployment
      if: always()
      run: |
        ssh -i ~/.ssh/id_rsa -t ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} "cd ~/${{ steps.project-dir.outputs.dir_name }} && docker compose ps && docker compose logs --tail=20 || echo 'Deployment verification failed'"