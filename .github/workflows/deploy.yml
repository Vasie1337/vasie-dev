name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      # Default environment if not specified via workflow_dispatch
      ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Shallow clone for faster checkout
      
      # Cache Docker layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
      
      # Setup SSH early in parallel with Docker steps
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Generate deployment tag
        id: tags
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
      
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ env.SHORT_SHA }}
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
          cache-from: |
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=${{ env.ENVIRONMENT }}
      
      - name: Generate Docker Compose file
        run: |
          cat > docker-compose.${{ env.ENVIRONMENT }}.yml << 'EOL'
          version: '3.8'
          
          services:
            vasie-dev:
              image: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ env.SHORT_SHA }}
              restart: always
              environment:
                - NODE_ENV=${{ env.ENVIRONMENT }}
              volumes:
                - vasie-dev-data:/data
              networks:
                - vasie-dev-network
          
            cloudflared:
              image: cloudflare/cloudflared:latest
              restart: always
              command: tunnel run
              environment:
                - TUNNEL_TOKEN=${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
              networks:
                - vasie-dev-network
          
          volumes:
            vasie-dev-data:
          
          networks:
            vasie-dev-network:
              driver: bridge
          EOL
      
      - name: Copy files and deploy to VPS (combined steps)
        run: |
          # Create project directory structure 
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/deployments/${{ env.PROJECT_NAME }}/${{ env.ENVIRONMENT }}"
          
          # Copy docker-compose file
          scp docker-compose.${{ env.ENVIRONMENT }}.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/deployments/${{ env.PROJECT_NAME }}/${{ env.ENVIRONMENT }}/docker-compose.yml
          
          # Copy any needed env files
          if [ -f ".env.${{ env.ENVIRONMENT }}" ]; then
            scp .env.${{ env.ENVIRONMENT }} ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/deployments/${{ env.PROJECT_NAME }}/${{ env.ENVIRONMENT }}/.env
          fi
          
          # Deploy service with custom pull policy to avoid unnecessary pulls
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ~/deployments/${{ env.PROJECT_NAME }}/${{ env.ENVIRONMENT }} && docker-compose pull && docker-compose up -d --remove-orphans"
          
          # More targeted cleanup - only remove dangling images and ones not used by current deployment
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "docker image prune -f && docker container prune -f"