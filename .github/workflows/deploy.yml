name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  CONFIG_FILE: .github/build-config.json

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.parse-config.outputs.services }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Parse build configuration
      id: parse-config
      run: |
        # Read the config file and output as JSON
        CONFIG=$(cat ${{ env.CONFIG_FILE }})
        echo "services=$(echo $CONFIG | jq -c '.services')" >> $GITHUB_OUTPUT

  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-${{ matrix.service.name }}
        tags: |
          type=sha
          latest
    
    - name: Build and push Docker image for ${{ matrix.service.name }}
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.service.name }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service.name }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts
    
    - name: Update docker-compose with new image tags
      run: |
        # Parse build config
        CONFIG=$(cat ${{ env.CONFIG_FILE }})
        
        # Create a temporary script to update docker-compose
        cat > update-compose.sh << 'EOF'
        #!/bin/bash
        CONFIG='${{ needs.prepare.outputs.services }}'
        
        # Update each service's image tag in docker-compose.yml
        echo "$CONFIG" | jq -c '.[]' | while read -r service; do
          NAME=$(echo "$service" | jq -r '.name')
          IMAGE_TAG="${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-${NAME}:${{ github.sha }}"
          
          # Update the image for this service
          sed -i "/^  ${NAME}:/,/^  [^ ]/ s|image: .*|image: ${IMAGE_TAG}|" docker-compose.yml
        done
        EOF
        
        chmod +x update-compose.sh
        ./update-compose.sh
    
    - name: Copy files to VPS
      run: |
        scp -i ~/.ssh/id_rsa docker-compose.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/project/
        scp -i ~/.ssh/id_rsa .env.production ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/project/.env
        
        # Copy any additional config files if specified
        if [ -d "config" ]; then
          scp -i ~/.ssh/id_rsa -r config ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/project/
        fi
    
    - name: Deploy on VPS
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << 'EOF'
          cd ~/project
          
          # Pull all the latest images
          docker-compose pull
          
          # Stop existing containers
          docker-compose down
          
          # Start new containers
          docker-compose up -d
          
          # Clean up old images
          docker image prune -f
        EOF
    
    - name: Verify deployment
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << 'EOF'
          cd ~/project
          docker-compose ps
          
          # Check logs for any errors
          docker-compose logs --tail=50
        EOF