name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  CONFIG_FILE: .github/build-config.json

jobs:
  prepare-config:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.parse-config.outputs.services }}
      service_names: ${{ steps.parse-service-names.outputs.names }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Parse build configuration
      id: parse-config
      run: |
        echo "services=$(cat ${{ env.CONFIG_FILE }} | jq -c '.services')" >> $GITHUB_OUTPUT
    
    - name: Extract service names
      id: parse-service-names
      run: |
        echo "names=$(cat ${{ env.CONFIG_FILE }} | jq -r '.services[].name' | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT

  build-images:
    needs: prepare-config
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image-tag.outputs.tag }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare-config.outputs.services) }}
      fail-fast: false
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set repository variables
      id: repo-vars
      run: |
        echo "docker_username=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "short_hash=$(echo "${{ github.sha }}" | cut -c1-7)" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Generate image tag
      id: image-tag
      run: |
        echo "tag=${{ steps.repo-vars.outputs.docker_username }}/${{ matrix.service.name }}:latest" >> $GITHUB_OUTPUT
    
    - name: Build and push ${{ matrix.service.name }}
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.image-tag.outputs.tag }}
        cache-from: type=gha,scope=${{ matrix.service.name }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service.name }}
        secrets: |
          "github_token=${{ secrets.GITHUB_TOKEN }}"
        build-args: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

  deploy-services:
    needs: [build-images, prepare-config]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set deployment variables
      id: deploy-vars
      run: |
        echo "repo_name=$(echo "${{ github.repository }}" | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "docker_username=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "service_names=${{ needs.prepare-config.outputs.service_names }}" >> $GITHUB_OUTPUT
    
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y sshpass wget
    
    - name: Create .env file for deployment
      run: |
        cat > .env << EOF
        DOCKER_USERNAME=${{ steps.deploy-vars.outputs.docker_username }}
        PROJECT_NAME=${{ steps.deploy-vars.outputs.repo_name }}
        IMAGE_TAG=latest
        INSTANCE_NAME=${{ steps.deploy-vars.outputs.repo_name }}
        ENVIRONMENT=production
        EOF
        
        echo '${{ toJSON(secrets) }}' | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> .env
    
    - name: Update docker-compose with new image tags
      run: |
        cat > update-compose.sh << 'EOF'
        #!/bin/bash
        
        SERVICES=$(cat .github/build-config.json | jq -c '.services[]')
        
        if ! command -v yq &> /dev/null; then
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq
        fi
        
        echo "$SERVICES" | while read -r service; do
          NAME=$(echo "$service" | jq -r '.name')
          IMAGE_TAG="${DOCKER_USERNAME}/${NAME}:latest"
          
          if yq '.services | has("'$NAME'")' docker-compose.yml | grep -q 'true'; then
            yq -i ".services.$NAME.image = \"$IMAGE_TAG\"" docker-compose.yml
          fi
        done
        EOF
        
        chmod +x update-compose.sh
        DOCKER_USERNAME="${{ steps.deploy-vars.outputs.docker_username }}" ./update-compose.sh
    
    - name: Deploy to VPS
      env:
        PROJECT_DIR: ${{ steps.deploy-vars.outputs.repo_name }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_IP: ${{ secrets.VPS_IP }}
        SSH_OPTS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      run: |
        # Create deployments directory structure
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh $SSH_OPTS -t $VPS_USER@$VPS_IP "mkdir -p ~/deployments/$PROJECT_DIR"
        
        # Copy files to VPS
        sshpass -p "${{ secrets.VPS_PASSWORD }}" scp $SSH_OPTS docker-compose.yml $VPS_USER@$VPS_IP:~/deployments/$PROJECT_DIR/
        sshpass -p "${{ secrets.VPS_PASSWORD }}" scp $SSH_OPTS .env $VPS_USER@$VPS_IP:~/deployments/$PROJECT_DIR/.env
        
        if [ -d "config" ]; then
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp $SSH_OPTS -r config $VPS_USER@$VPS_IP:~/deployments/$PROJECT_DIR/
        fi
        
        # Deploy
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh $SSH_OPTS -t $VPS_USER@$VPS_IP \
          "cd ~/deployments/$PROJECT_DIR && source .env && docker compose down || true && docker compose pull && docker compose up -d && docker image prune -f"