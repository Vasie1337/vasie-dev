###########################################
# Deploy Stage
###########################################
name: 3. Deploy to VPS

###########################################
# Workflow Triggers
###########################################
on:
  # For manual deployment
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project name'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      instance_name:
        description: 'Instance name'
        required: true
        type: string
      short_sha:
        description: 'Short SHA of the commit'
        required: true
        type: string
  
  # Called by other workflows
  workflow_call:
    inputs:
      project_name:
        description: 'Project name'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      instance_name:
        description: 'Instance name'
        required: true
        type: string
      short_sha:
        description: 'Short SHA of the commit'
        required: true
        type: string

###########################################
# Jobs
###########################################
jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Use inputs directly from workflow_call or workflow_dispatch
    env:
      PROJECT_NAME: ${{ inputs.project_name }}
      ENVIRONMENT: ${{ inputs.environment }}
      INSTANCE_NAME: ${{ inputs.instance_name }}
      SHORT_SHA: ${{ inputs.short_sha }}
    
    steps:
      #---------------------------------------
      # Checkout Repository
      #---------------------------------------
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Shallow clone for faster checkout
      
      #---------------------------------------
      # Download Artifacts
      #---------------------------------------
      - name: Download deployment files
        uses: actions/download-artifact@v4
        with:
          name: deployment-files
          path: ./
        continue-on-error: true  # In case running directly
      
      #---------------------------------------
      # Generate Docker Compose file if not available
      #---------------------------------------
      - name: Generate Docker Compose file if needed
        if: ${{ !success() }}
        run: |
          cat > docker-compose.${{ env.ENVIRONMENT }}-${{ env.INSTANCE_NAME }}.yml << 'EOL'
          version: '3.8'
          
          services:
            ${{ env.INSTANCE_NAME }}:
              image: ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}:${{ env.SHORT_SHA }}
              container_name: ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}
              restart: always
              environment:
                - NODE_ENV=${{ env.ENVIRONMENT }}
                - INSTANCE_NAME=${{ env.INSTANCE_NAME }}
              volumes:
                - ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-data:/data
              networks:
                - ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-network
          
            ${{ env.INSTANCE_NAME }}-cloudflared:
              image: cloudflare/cloudflared:latest
              container_name: ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-cloudflared
              restart: always
              command: tunnel run
              environment:
                - TUNNEL_TOKEN=${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
              networks:
                - ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-network
          
          volumes:
            ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-data:
              name: ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-data
          
          networks:
            ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-network:
              name: ${{ env.INSTANCE_NAME }}-${{ env.ENVIRONMENT }}-network
              driver: bridge
          EOL
      
      #---------------------------------------
      # SSH Setup
      #---------------------------------------
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
      
      #---------------------------------------
      # Deploy to VPS
      #---------------------------------------
      - name: Copy files and deploy to VPS
        run: |
          #----- Create Directory Structure -----
          # Create project directory structure with instance separation
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/deployments/${{ env.PROJECT_NAME }}/${{ env.ENVIRONMENT }}/${{ env.INSTANCE_NAME }}"
          
          #----- Copy Configuration Files -----
          # Copy docker-compose file
          scp docker-compose.${{ env.ENVIRONMENT }}-${{ env.INSTANCE_NAME }}.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/deployments/${{ env.PROJECT_NAME }}/${{ env.ENVIRONMENT }}/${{ env.INSTANCE_NAME }}/docker-compose.yml
          
          # Copy environment-specific env file if it exists
          if [ -f ".env.${{ env.ENVIRONMENT }}" ]; then
            scp .env.${{ env.ENVIRONMENT }} ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/deployments/${{ env.PROJECT_NAME }}/${{ env.ENVIRONMENT }}/${{ env.INSTANCE_NAME }}/.env.environment
          fi
          
          # Copy instance-specific env file if it exists
          if [ -f ".env.${{ env.INSTANCE_NAME }}" ]; then
            scp .env.${{ env.INSTANCE_NAME }} ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/deployments/${{ env.PROJECT_NAME }}/${{ env.ENVIRONMENT }}/${{ env.INSTANCE_NAME }}/.env.instance
          fi
          
          # Copy combined env file if it exists
          if [ -f ".env.${{ env.ENVIRONMENT }}.${{ env.INSTANCE_NAME }}" ]; then
            scp .env.${{ env.ENVIRONMENT }}.${{ env.INSTANCE_NAME }} ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/deployments/${{ env.PROJECT_NAME }}/${{ env.ENVIRONMENT }}/${{ env.INSTANCE_NAME }}/.env
          fi
          
          #----- Start Services -----
          # Deploy service with custom pull policy to avoid unnecessary pulls
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ~/deployments/${{ env.PROJECT_NAME }}/${{ env.ENVIRONMENT }}/${{ env.INSTANCE_NAME }} && docker-compose pull && docker-compose up -d --remove-orphans"
          
          #----- Cleanup -----
          # More targeted cleanup - only remove dangling images and ones not used by current deployment
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "docker image prune -f && docker container prune -f"
      
      #---------------------------------------
      # Deployment Notification
      #---------------------------------------
      - name: Deployment completion notification
        run: |
          echo "Deployment completed successfully!"
          echo "Project: ${{ env.PROJECT_NAME }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Instance: ${{ env.INSTANCE_NAME }}"
          echo "Version: ${{ env.SHORT_SHA }}"